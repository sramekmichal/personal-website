[{"content":"\u003cp\u003eFollowing text involves AWS native tools for the continuous monitoring of activities within an AWS environment to detect and respond to security threats and breaches.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eIt encompasses the discovery collection of best practices\u003c/em\u003e, how to achieve this goal. Implementing this \u003cu\u003esecure\u003c/u\u003e \u003cstrong\u003eActivity Monitoring and Audit in AWS\u003c/strong\u003e, will enhance security posture, mitigate risks, and better protect all AWS resources and sensitive data from unauthorised access or malicious activities.\u003c/p\u003e\n\u003cp\u003eEvery decision made in AWS environment should be in accordance with the \u003ca href=\"https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/architecture.html\"\u003eAWS Security Reference Architecture\u003c/a\u003e. This involves understanding the principles outlined in the architecture, conducting a risk assessment to identify potential security risks, and designing AWS architecture to incorporate security controls at every layer.\u003c/p\u003e\n\u003ch2 id=\"framework\"\u003eFramework\u003c/h2\u003e\n\u003cp\u003eI personally recommend \u0026ldquo;internal audit framework\u0026rdquo; which is in compliance with AWS and should include the following (16) steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eStart to use \u003ca href=\"https://docs.aws.amazon.com/prescriptive-guidance/latest/migration-aws-environment/understanding-landing-zones.html\"\u003eAWS Landing Zone\u003c/a\u003e with \u003ca href=\"https://digitalcloud.training/what-is-aws-control-tower/\"\u003eAWS Control Tower\u003c/a\u003e (\u003ca href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_introduction.html\"\u003eAWS Organizations\u003c/a\u003e)\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eAWS Landing Zone primarily sets up the initial infrastructure (multi-account AWS environment, core infrastructure components like networking and IAM). AWS Control Tower provides ongoing management and enforcement of security and compliance controls (centralised governance, compliance capabilities and enforcing policies across entire AWS environment). AWS Organizations is the underlying AWS service of AWS Control Tower.\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eTurn on \u003ca href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\"\u003eAWS CloudTrail\u003c/a\u003e in each AWS account\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eAWS CloudTrail logs can be analysed in real-time to detect unauthorised access attempts or changes to critical resources. Integration with monitoring tools enables proactive threat detection and compliance monitoring across the AWS environment.\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eStore \u003ca href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-file-examples.html\"\u003eAWS CloudTrail log\u003c/a\u003e in a centralised logging account with very restricted access\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eProper stream log management and analysis processes enable more efficient threat detection and incident response. Restricting access to the centralised logging account minimises the risk of unauthorised access, ensuring data confidentiality and integrity.\u003c/p\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eCreate \u003ca href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_architecture.html\"\u003eAWS CloudWatch\u003c/a\u003e alarms for specific API calls\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eReal-time notification alarms of critical events for specific API calls (high-volume data transfers, sensitive resource modifications) should be enabled. These alarms serve as proactive measures. AWS CloudWatch Logs Insights can also search API history beyond the last 90 days. Additional useful info \u003ca href=\"https://medium.com/free-code-camp/how-to-auto-create-cloudwatch-alarms-for-apis-with-cloudwatch-events-and-lambda-b128920857aa\"\u003eHERE\u003c/a\u003e.\u003c/p\u003e\n\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eUse Logging IP traffic for VPCs and DNS logs\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eObtaining valuable informations using \u003ca href=\"https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html\"\u003eVPC Flow Logs\u003c/a\u003e and \u003ca href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver-query-logs.html\"\u003eAmazon Route 53 resolver query logs\u003c/a\u003e and streaming them to either an Amazon S3 bucket or a CloudWatch log group is crucial.\u003c/p\u003e\n\u003col start=\"6\"\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003ePeriodically examine “AWS log files” with \u003ca href=\"https://docs.aws.amazon.com/guardduty/latest/ug/what-is-guardduty.html\"\u003eAWS GuardDuty\u003c/a\u003e\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThis process enhances activity monitoring in AWS by proactively identifying security threats and suspicious activities. AWS GuardDuty can automatically analyse threat detection of AWS CloudTrail Events, VPC Flow Logs, DNS Logs and generally alerts to unexpected activity.\u003c/p\u003e\n\u003col start=\"7\"\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eEnable \u003ca href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/logging-with-S3.html\"\u003eAWS S3 buckets logging\u003c/a\u003e to monitor requests made to each bucket\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIt allows to monitor requests made to each bucket and track access attempts, changes, and other activities. Analysing S3 access logs can help identify unauthorised access attempts, data breaches or misconfigurations.\u003c/p\u003e\n\u003col start=\"8\"\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eUse \u003ca href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html\"\u003eAWS Config\u003c/a\u003e for viewing historical IAM configuration and changes over time\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eAWS Config is enabling to view the IAM policy that was assigned to a user, group, or role at any time. It is basically resource inventory (existing as well as deleted).\u003c/p\u003e\n\u003col start=\"9\"\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eCollect alerts for IAM configuration changes and their audits\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBy setting up alerts we can be notified on IAM configuration changes. Additional useful info \u003ca href=\"https://aws.amazon.com/blogs/security/how-to-receive-alerts-when-your-iam-configuration-changes/\"\u003eHERE\u003c/a\u003e.\u003c/p\u003e\n\u003col start=\"10\"\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eSet up \u003ca href=\"https://docs.aws.amazon.com/detective/latest/adminguide/what-is-detective.html\"\u003eAWS Detective\u003c/a\u003e controls around user creation and using a user credentials\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIt is need to be implemented together with AWS Config when a new user or group is created and for any API actions performed by a non-federated IAM principal.\u003c/p\u003e\n\u003col start=\"11\"\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003ePeriodically generate and download IAM credential report\u003c/strong\u003e\u003c/em\u003e \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eReport can be used to audit the effects of credential lifecycle requirements (lists all users,  status of their passwords, access key updates and MFA devices). It can be further reported to an external auditor.\u003c/p\u003e\n\u003col start=\"12\"\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eCheck regularly the \u003ca href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html\"\u003eAWS IAM Access Analyzer\u003c/a\u003e\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eAchieving least privilege and grant the right fine-grained permissions. It provides capabilities to set, verify, and refine permissions, analyse external access and validate, that policies match corporate security standards.\u003c/p\u003e\n\u003col start=\"13\"\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eAudit session activity using \u003ca href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-what-is.html\"\u003eAWS EventBridge\u003c/a\u003e\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSet up rules to detect when changes happen to any AWS resources. It provides comprehensive visibility into user actions and system events.\u003c/p\u003e\n\u003col start=\"14\"\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eEnable the session activity logging in \u003ca href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/what-is-systems-manager.html\"\u003eAWS Systems Manager\u003c/a\u003e\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eContinual stream of session data logs to AWS CloudWatch Logs with details (user’s commands in a session, the ID of the user and timestamps). Additional useful info \u003ca href=\"https://aws.amazon.com/blogs/security/how-to-record-ssh-sessions-established-through-a-bastion-host/\"\u003eHERE\u003c/a\u003e.\u003c/p\u003e\n\u003col start=\"15\"\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eUse \u003ca href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html\"\u003eAWS Access Advisor\u003c/a\u003e to refine set up permission guardrails\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIt analyses last accessed information in AWS accounts. Permission guardrails help control which services users and applications can access and determine the services not used by IAM users and roles. With service control policies (SCPs), access to those services can be restricted.\u003c/p\u003e\n\u003col start=\"16\"\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eAutomatically collect and monitor evidence by \u003ca href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"\u003eAWS Audit Manager\u003c/a\u003e\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eProactive measure reducing risk by fine-tuning AWS controls. Evidence is a record that contains the information needed to demonstrate compliance with the requirements specified by a control. Examples of evidence could be a change activity triggered by a user, or a system configuration snapshot.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eImplementing the above framework will help to ensure that the AWS environment is secure and compliant with security best practices. It will also help to detect and respond to security threats and breaches in a timely manner. By continuously monitoring activities within the AWS environment, organisations can better protect their resources and sensitive data from unauthorised access or malicious activities.\u003c/p\u003e\n","description":"Activity Monitoring and Audit in AWS","image":"/images/blogs/aws-security.jpg","permalink":"http://localhost:1313/blogs/activity-monitoring-and-audit-in-aws/","title":"Activity Monitoring and Audit in AWS"},{"content":"\u003cp\u003eThere are currently 2 types of personal access tokens (PATs) available on GitHub. \u003cstrong\u003eFine-grained PATs\u003c/strong\u003e (beta) and \u003cstrong\u003eClassic PATs\u003c/strong\u003e. Both are used for authentication and authorization, but have different properties and uses. There is no Token like Token.\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e \u003c/th\u003e\n\u003cth\u003eFine-grained PATs (beta)\u003c/th\u003e\n\u003cth\u003eClassic PATs\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ePurpose\u003c/td\u003e\n\u003ctd\u003eToken for GitHub API for scripting or testing.\u003c/td\u003e\n\u003ctd\u003eOAuth personal access tokens \u003cstrong\u003eOR\u003c/strong\u003e Instead of a Git password via HTTPS \u003cstrong\u003eOR\u003c/strong\u003e For API authentication via Basic Authentication.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eExpiration\u003c/td\u003e\n\u003ctd\u003eRequired (up to 1 year)\u003c/td\u003e\n\u003ctd\u003eCan be used without expiration.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eOwner\u003c/td\u003e\n\u003ctd\u003eUser and also Organization\u003c/td\u003e\n\u003ctd\u003eUser\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eAccess\u003c/td\u003e\n\u003ctd\u003eEither repository permissions (public, all, selected) and may (may not) access resources under the personal account; \u003cstrong\u003eOR\u003c/strong\u003e repository permissions (public, all, selected) and may (may not) access resources under the organization\u003c/td\u003e\n\u003ctd\u003eDetermined by \u003ca href=\"https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/scopes-for-oauth-apps\"\u003eScopes\u003c/a\u003e. These can be for anything the user is entitled to (even within the Organization).\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eOverview\u003c/td\u003e\n\u003ctd\u003eThey are visible in the Organization in the \u0026ldquo;Active tokens\u0026rdquo; overview with a visible expiration date. Once clicked, the accesses (what permissions the token has in which repository) are clearly visible.\u003c/td\u003e\n\u003ctd\u003eThere is no overview in the Organization. It is possible to retrieve token activity via the API, but we cannot distinguish user activity from machine activity. Their activity is only recorded in GitHub Audit Logs.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCan PAT be disabled?\u003c/td\u003e\n\u003ctd\u003eYes\u003c/td\u003e\n\u003ctd\u003eYes\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIs approval required?\u003c/td\u003e\n\u003ctd\u003eYes and No\u003c/td\u003e\n\u003ctd\u003eNo\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"active-use-of-fine-grained-pats\"\u003eActive use of Fine-grained PATs\u003c/h2\u003e\n\u003cp\u003eIf the GitHub Organization Member (not the Owner) chooses to use Fine-grained PATs and mandatory approval of Fine-grained PATs is enabled, the Member will receive a \u0026ldquo;not found\u0026rdquo; message and the request will be in pending status. It will also appear in the \u0026ldquo;Pending Requests\u0026rdquo; report in the Organization:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/blogs/fine-grained-pat.png\" alt=\"Fine-Grained PAT\"\u003e\u003c/p\u003e\n\u003cp\u003eThe GitHub Organization Owner can judge whether the access is justified or not and approve/deny the request (or instruct the Member to restrict the rights of his PAT):\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/blogs/repository-access.png\" alt=\"Repository Access\"\u003e\u003c/p\u003e\n\u003cp\u003eThis way \u003cstrong\u003eleast privileges\u003c/strong\u003e can be demanded and access is under control. Member will receive the approval/denial result via email.\u003c/p\u003e\n\u003cp\u003eWith disabled approval, the PAT is visible in the overview of active PATs, but there is no Organization Owner control over accesses.\u003c/p\u003e\n\u003cp\u003eIf a Member delete their PAT, no Owner approval is required, the PAT simply disappears from the list of active PATs.\u003c/p\u003e\n\u003cp\u003eIf a Member changes the rights of an already approved PAT, it needs to be re-approved (\u003cstrong\u003ecorrect and expected approach\u003c/strong\u003e).\u003c/p\u003e\n\u003cp\u003eWith Classic PATs there is no overview of who and how many are actually using them. Through the API it is possible to get some information, but it is no longer possible to distinguish between a machine and a Member (all activities are pretending to be Member activities).\u003c/p\u003e\n\u003ch2 id=\"the-risks-of-using-pats\"\u003eThe risks of using PATs\u003c/h2\u003e\n\u003cp\u003eThe use of PATs within the GitHub Organization exposes the Organization to some potential risks:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eBroad permissions:\u003c/strong\u003e If the PAT grants wide permissions (e.g. administrative rights to everything in the Organization), a Member or application with this token can perform a wide range of actions, including those that may harm the Organization.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLoss of token:\u003c/strong\u003e If the PAT is in the wrong hands, it can be misused. Depending on the permissions of the token, this can mean loss of data, modification of repositories, etc.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExpiration:\u003c/strong\u003e Classic PATs on GitHub do not need to have any expiration (see table). This means that if a PAT is compromised and no one notices, it can be misused for a long time.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAudit:\u003c/strong\u003e Although actions performed using PAT can be recorded, it can be harder to distinguish who actually performed the action if multiple people or systems share the token.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eManagement:\u003c/strong\u003e With multiple PATs created it can be harder to keep track of who created what PAT, why and where it is used -\u0026gt; especially in the case of Classic PATs that are not visible in the active PAT overview (see table). This is a significant complication for security management.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFunction of systems\u003c/strong\u003e: A Member who builds a functional system/application on his/her personal PAT within his/her team and changes employment in the future, the rest of the team (or possibly the Organization) will no longer be able to use the automation/system/application. Upon leaving GitHub, the Organization will lose its PAT rights.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"what-github-support-says\"\u003eWhat GitHub Support says\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eFine-grained PATs have similar access restrictions as GitHub Apps.\u003c/li\u003e\n\u003cli\u003eClassic PAT has the most capabilities of all the verification methods.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdding \u003ca href=\"https://docs.github.com/en/rest/apps/installations?apiVersion=2022-11-28#add-a-repository-to-an-app-installation\"\u003erepository to the GitHup App\u003c/a\u003e would not help, because it has unsupported \u003ca href=\"https://docs.github.com/en/rest/overview/endpoints-available-for-fine-grained-personal-access-tokens?apiVersion=2022-11-28#apps\"\u003eendpoint for Fine-grained PAT\u003c/a\u003e. Managing GitHub Apps has always been seen as something that requires a human to be involved because of the potential for improper access. GitHub is also getting feedback on Fine-grained PATs (they are in beta) in \u003ca href=\"https://github.com/orgs/community/discussions/36441\"\u003ediscussion\u003c/a\u003e. Anyone interested in using Fine-grained PATs for GitHub Apps and their repository management can have their voice heard here.\u003c/p\u003e\n\u003ch2 id=\"replacement-for-pats\"\u003eReplacement for PATs\u003c/h2\u003e\n\u003cp\u003eUnless a specific case requires it, the use of PATs within the GitHub Organization should be avoided at all costs (especially classic ones), see Risks above. There are different authentication and authorization solutions for different tasks and integrations:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eOAuth App -\u003c/strong\u003e Allows you to grant a specific application access to specific resources with specified permissions. In addition, access can be revoked at any time.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGitHub Apps -\u003c/strong\u003e the most preferred way to integrate with GitHub. They can only access the information they need (\u003cstrong\u003eleast privileges\u003c/strong\u003e) which increases security.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDeploy Keys -\u003c/strong\u003e only for specific repositories, for authentication. These are SSH keys that bind to exactly one repository and allow reading or writing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWebhooks -\u003c/strong\u003e for notification of certain events occurring in the Repository or the Organization. Not functional with applications running on-premise.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"apparent-solution\"\u003eApparent Solution\u003c/h2\u003e\n\u003cp\u003ePAT\u0026rsquo;s are unfortunately another thing which is being left very often in an uncontrolled situation due to nobody really is responsible for it. There is no definite \u0026ldquo;best practise\u0026rdquo; approach. One thing is recommended - only the newer fine-grained PATs with enforced approval should be allowed to GitHub Organization Members. This way, the Organization Owner can control the accesses and ensure that the principle of \u003cu\u003eleast privileges\u003c/u\u003e is respected. The use of Classic PATs should be avoided as much as possible and left as a privilege only for the Organization Owners and their GitHub management.\u003c/p\u003e\n","description":"GitHub: Personal Access Tokens","image":"/images/blogs/github-security.jpg","permalink":"http://localhost:1313/blogs/github-personal-access-tokens/","title":"GitHub: Personal Access Tokens"}]